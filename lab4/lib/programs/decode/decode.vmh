// Original Code
// @000                	// .pos 0
// 
// 10                  	//   0:  nop
// 00                  	//   1:  halt
// 2003                	//   2:  rrmovq %rax, %rbx
// 2203                	//   4:  cmovl %rax, %rbx
// 2103                	//   6:  cmovle %rax, %rbx
// 2303                	//   8:  cmove %rax, %rbx
// 2403                	//  10:  cmovne %rax, %rbx
// 2503                	//  12:  cmovge %rax, %rbx
// 2603                	//  14:  cmovg %rax, %rbx
// 30f00000000000000000	//  16:  irmovq $0, %rax
// 40030000000000000000	//  26:  rmmovq %rax, (%rbx)
// 50300000000000000000	//  36:  mrmovq (%rax), %rbx
// 6003                	//  46:  addq %rax, %rbx
// 6103                	//  48:  subq %rax, %rbx
// 6203                	//  50:  andq %rax, %rbx
// 6303                	//  52:  xorq %rax, %rbx
// 707800000000000000  	//  54:  jmp Stack
// 727800000000000000  	//  63:  jl Stack
// 717800000000000000  	//  72:  jle Stack
// 737800000000000000  	//  81:  je Stack
// 747800000000000000  	//  90:  jne Stack
// 757800000000000000  	//  99:  jge Stack
// 767800000000000000  	// 108:  jg Stack
// 80f000000000000000  	// 117:  call Function
// 90                  	// 126:  ret
// a05f                	// 127:  pushq %rbp
// b05f                	// 129:  popq %rbp
// 
// @00f                	// .pos 120
//                     	// Stack:
// 
// @01e                	// .pos 240
//                     	// Function:


// VMH Format Result
@000
1000200322032103
2303240325032603
30f0000000000000
0000400300000000
0000000050300000
0000000000006003
6103620363037078
0000000000000072
7800000000000000
7178000000000000
0073780000000000
0000747800000000
0000007578000000
0000000076780000
000000000080f000
00000000000090a0
5fb05f0000000000
