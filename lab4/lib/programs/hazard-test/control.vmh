// Original Code
// @000                	// .pos 0
//                     	// Init:
//                     	// # Set Stack Pointer
// 30f44001000000000000	//   0:  irmovq Stack, %rsp
// 30f54001000000000000	//  10:  irmovq Stack, %rbp
// 30f0ffffffffffffffff	//  20:  irmovq $-1, %rax # Set rax to wrong value
// 
// 6333                	//  30:  xorq %rbx, %rbx # ZF = 1 (equal)
// 74b800000000000000  	//  32:  jne Wrong       # should not jump
// 733800000000000000  	//  41:  je TargetOne    # should jump
// 
// c00e                	//  50:  mtc0 %rax, $14  # rax = -1 here
// 00                  	//  52:  halt
// 
// @007                	// .pos 56
//                     	// TargetOne:
// 6200                	//  56:  andq %rax, %rax # rax = -1, ZF = 0 and SF = 1 (less)
// 75b800000000000000  	//  58:  jge Wrong       # should not jump
// 727800000000000000  	//  67:  jl TargetTwo    # should jump
// 
// c00e                	//  76:  mtc0 %rax, $14  # rax = -1 here
// 00                  	//  78:  halt
// 
// @00a                	// .pos 80
//                     	// Function:
// 6333                	//  80:  xorq %rbx, %rbx # set ZF = 0 (equal)
// 90                  	//  82:  ret
// 
// @00f                	// .pos 120
//                     	// TargetTwo:
// 805000000000000000  	// 120:  call Function
//                     	// # if Function called properly, 'equal' condition
//                     	// # if Function not called, 'less' condition
// 730801000000000000  	// 129:  je Right # should jump
// 70b800000000000000  	// 138:  jmp Wrong
// 
// c00e                	// 147:  mtc0 %rax, $14 # rax = -1 here
// 00                  	// 149:  halt
// 
// @017                	// .pos 184
//                     	// Wrong:
// c00e                	// 184:  mtc0 %rax, $14 # rax = -1 here
// 00                  	// 186:  halt
// 
// @021                	// .pos 264
//                     	// Right:
// 30f00000000000000000	// 264:  irmovq $0, %rax # rax = 0
// c00e                	// 274:  mtc0 %rax, $14  # rax = 0 here
// 00                  	// 276:  halt
// 
// @028                	// .pos 320
//                     	// Stack:


// VMH Format Result
@000
30f4400100000000
000030f540010000
0000000030f0ffff
ffffffffffff6333
74b8000000000000
0073380000000000
0000c00e00000000
@007
620075b800000000
0000007278000000
00000000c00e0000
@00a
6333900000000000
@00f
8050000000000000
0073080100000000
000070b800000000
000000c00e000000
@017
c00e000000000000
@021
30f0000000000000
0000c00e00000000
