// Original Code
//                     	// # Hanoi Test Program
//                     	// #
//                     	// # This program tests if hanoi-tower count is computed properly or not.
//                     	// #
// 
// @000                	// .pos 0
//                     	// Init:
// 30f50006000000000000	//   0:  irmovq Stack, %rbp
// 30f40006000000000000	//  10:  irmovq Stack, %rsp
// 802d00000000000000  	//  20:  call Main
//                     	// Succeed:
// c00e                	//  29:  mtc0 %rax, $0xe
// 00                  	//  31:  halt
//                     	// Fail:
// 30f0ffffffffffffffff	//  32:  irmovq $-1, %rax
// c00e                	//  42:  mtc0 %rax, $0xe
// 00                  	//  44:  halt
// 
//                     	// Main:
// a05f                	//  45:  pushq   %rbp
// 2045                	//  47:  rrmovq  %rsp, %rbp
// 30f81300000000000000	//  49:  irmovq  $19, %r8        # Array_end = 19
// 30f90100000000000000	//  59:  irmovq  $1,  %r9        # i = 1
// 30fa0002000000000000	//  69:  irmovq  Array, %r10
// 
//                     	// Loop:
// 2097                	//  79:  rrmovq  %r9, %rdi
// 800001000000000000  	//  81:  call    Hanoi_cnt       # Hanoi_cnt(i)
// 50ba0000000000000000	//  90:  mrmovq  (%r10), %r11    # x = Array[i]
// 61b0                	// 100:  subq    %r11, %rax      # Check result with the answer in Array
// 742000000000000000  	// 102:  jne     Fail
// 30fb0100000000000000	// 111:  irmovq  $1, %r11
// 60b9                	// 121:  addq    %r11, %r9       # i += 1
// 30fb0800000000000000	// 123:  irmovq  $8, %r11
// 60ba                	// 133:  addq    %r11, %r10      # Array += 1
// 30fb0100000000000000	// 135:  irmovq  $1, %r11
// 61b8                	// 145:  subq    %r11, %r8       # if(i > 19) break
// 744f00000000000000  	// 147:  jne     Loop
// 2054                	// 156:  rrmovq  %rbp, %rsp
// b05f                	// 158:  popq    %rbp
// 90                  	// 160:  ret
// 
// @020                	// .pos 0x100
//                     	// Hanoi_cnt:
// a05f                	// 256:  pushq   %rbp
// 2045                	// 258:  rrmovq  %rsp, %rbp
// a03f                	// 260:  pushq   %rbx            # Save callee-save registers
// a0cf                	// 262:  pushq   %r12
// 2073                	// 264:  rrmovq  %rdi, %rbx
// 30fc0100000000000000	// 266:  irmovq  $1, %r12
// 61c3                	// 276:  subq    %r12, %rbx
// 743201000000000000  	// 278:  jne     Not_one
// 30f00100000000000000	// 287:  irmovq  $1, %rax
// 704301000000000000  	// 297:  jmp     End
// 
//                     	// Not_one:
// 2030                	// 306:  rrmovq  %rbx, %rax
// 61c7                	// 308:  subq    %r12, %rdi
// 800001000000000000  	// 310:  call    Hanoi_cnt
// 6000                	// 319:  addq    %rax, %rax
// 60c0                	// 321:  addq    %r12, %rax
// 
//                     	// End:
// b0cf                	// 323:  popq    %r12            # Restore callee-save registers
// b03f                	// 325:  popq    %rbx
// 2054                	// 327:  rrmovq  %rbp, %rsp
// b05f                	// 329:  popq    %rbp
// 90                  	// 331:  ret
// 
// @040                	// .pos 0x200
//                     	// .align 8
//                     	// Array:
// 0100000000000000    	// 512:  .quad 0x0001
// 0300000000000000    	// 520:  .quad 0x0003
// 0700000000000000    	// 528:  .quad 0x0007
// 0f00000000000000    	// 536:  .quad 0x000f
// 1f00000000000000    	// 544:  .quad 0x001f
// 3f00000000000000    	// 552:  .quad 0x003f
// 7f00000000000000    	// 560:  .quad 0x007f
// ff00000000000000    	// 568:  .quad 0x00ff
// ff01000000000000    	// 576:  .quad 0x01ff
// ff03000000000000    	// 584:  .quad 0x03ff
// ff07000000000000    	// 592:  .quad 0x07ff
// ff0f000000000000    	// 600:  .quad 0x0fff
// ff1f000000000000    	// 608:  .quad 0x1fff
// ff3f000000000000    	// 616:  .quad 0x3fff
// ff7f000000000000    	// 624:  .quad 0x7fff
// ffff000000000000    	// 632:  .quad 0xffff
// ffff010000000000    	// 640:  .quad 0x0001ffff
// ffff030000000000    	// 648:  .quad 0x0003ffff
// ffff070000000000    	// 656:  .quad 0x0007ffff          # 2^19-1
// 
// @0c0                	// .pos 0x600
//                     	// Stack:


// VMH Format Result
@000
30f5000600000000
000030f400060000
00000000802d0000
0000000000c00e00
30f0ffffffffffff
ffffc00e00a05f20
4530f81300000000
00000030f9010000
000000000030fa00
0200000000000020
9780000100000000
000050ba00000000
0000000061b07420
0000000000000030
fb01000000000000
0060b930fb080000
000000000060ba30
fb01000000000000
0061b8744f000000
000000002054b05f
9000000000000000
@020
a05f2045a03fa0cf
207330fc01000000
0000000061c37432
0100000000000030
f001000000000000
0070430100000000
0000203061c78000
0100000000000060
0060c0b0cfb03f20
54b05f9000000000
@040
0100000000000000
0300000000000000
0700000000000000
0f00000000000000
1f00000000000000
3f00000000000000
7f00000000000000
ff00000000000000
ff01000000000000
ff03000000000000
ff07000000000000
ff0f000000000000
ff1f000000000000
ff3f000000000000
ff7f000000000000
ffff000000000000
ffff010000000000
ffff030000000000
ffff070000000000
