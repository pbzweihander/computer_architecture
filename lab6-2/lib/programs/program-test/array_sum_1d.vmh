// Original Code
//                     	// # Execution begins at address 0
// @000                	// .pos 0
// 30f40002000000000000	//   0:  irmovq stack, %rsp  	        # Set up stack pointer
// 802801000000000000  	//  10:  call   main		                # Execute main program
// 30f81002000000000000	//  19:  irmovq $528, %r8 # Check Result
// 6180                	//  29:  subq   %r8, %rax
// c00e                	//  31:  mtc0   %rax, $0xe
// 00                  	//  33:  halt			                # Terminate program
// 
//                     	// # Array of 4 elements
//                     	// .align 8
// 000000000000        	// (autogenerated by assembler for alignment)
//                     	// array:
// 0100000000000000    	//  40:  .quad 1
// 0200000000000000    	//  48:  .quad 2
// 0300000000000000    	//  56:  .quad 3
// 0400000000000000    	//  64:  .quad 4
// 0500000000000000    	//  72:  .quad 5
// 0600000000000000    	//  80:  .quad 6
// 0700000000000000    	//  88:  .quad 7
// 0800000000000000    	//  96:  .quad 8
// 0900000000000000    	// 104:  .quad 9
// 0a00000000000000    	// 112:  .quad 10
// 0b00000000000000    	// 120:  .quad 11
// 0c00000000000000    	// 128:  .quad 12
// 0d00000000000000    	// 136:  .quad 13
// 0e00000000000000    	// 144:  .quad 14
// 0f00000000000000    	// 152:  .quad 15
// 1000000000000000    	// 160:  .quad 16
// 1100000000000000    	// 168:  .quad 17
// 1200000000000000    	// 176:  .quad 18
// 1300000000000000    	// 184:  .quad 19
// 1400000000000000    	// 192:  .quad 20
// 1500000000000000    	// 200:  .quad 21
// 1600000000000000    	// 208:  .quad 22
// 1700000000000000    	// 216:  .quad 23
// 1800000000000000    	// 224:  .quad 24
// 1900000000000000    	// 232:  .quad 25
// 1a00000000000000    	// 240:  .quad 26
// 1b00000000000000    	// 248:  .quad 27
// 1c00000000000000    	// 256:  .quad 28
// 1d00000000000000    	// 264:  .quad 29
// 1e00000000000000    	// 272:  .quad 30
// 1f00000000000000    	// 280:  .quad 31
// 2000000000000000    	// 288:  .quad 32
// 
//                     	// main:
// 30f72800000000000000	// 296:  irmovq array,%rdi
// 30f62000000000000000	// 306:  irmovq $32,%rsi
// 804601000000000000  	// 316:  call sum		# sum(array, 32)
// 90                  	// 325:  ret
// 
//                     	// # long sum(long *start, long count)
//                     	// # start in %rdi, count in %rsi
//                     	// sum:
// 30f80800000000000000	// 326:  irmovq $8,%r8        # Constant 8
// 30f90100000000000000	// 336:  irmovq $1,%r9	     # Constant 1
// 6300                	// 346:  xorq %rax,%rax	     # sum = 0
// 6266                	// 348:  andq %rsi,%rsi	     # Set CC
// 707701000000000000  	// 350:  jmp     test         # Goto test
//                     	// loop:
// 50a70000000000000000	// 359:  mrmovq (%rdi),%r10   # Get *start
// 60a0                	// 369:  addq %r10,%rax       # Add to sum
// 6087                	// 371:  addq %r8,%rdi        # start++
// 6196                	// 373:  subq %r9,%rsi        # count--.  Set CC
//                     	// test:
// 746701000000000000  	// 375:  jne    loop          # Stop when 0
// 90                  	// 384:  ret                  # Return
// 
//                     	// # Stack starts here and grows to lower addresses
// @040                	// .pos 0x200
//                     	// stack:


// VMH Format Result
@000
30f4000200000000
0000802801000000
00000030f8100200
00000000006180c0
0e00000000000000
0100000000000000
0200000000000000
0300000000000000
0400000000000000
0500000000000000
0600000000000000
0700000000000000
0800000000000000
0900000000000000
0a00000000000000
0b00000000000000
0c00000000000000
0d00000000000000
0e00000000000000
0f00000000000000
1000000000000000
1100000000000000
1200000000000000
1300000000000000
1400000000000000
1500000000000000
1600000000000000
1700000000000000
1800000000000000
1900000000000000
1a00000000000000
1b00000000000000
1c00000000000000
1d00000000000000
1e00000000000000
1f00000000000000
2000000000000000
30f7280000000000
000030f620000000
0000000080460100
00000000009030f8
0800000000000000
30f9010000000000
0000630062667077
0100000000000050
a700000000000000
0060a06087619674
6701000000000000
9000000000000000
